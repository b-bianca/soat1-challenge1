name: "Restaurant CI/CD"

on:
  push:
    branches:
      - main
  pull_request:
jobs:
  create-docker-image:
    name: "Build Docker Image"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY}}
          aws-region: ${{vars.AWS_REGION}}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{vars.AWS_ECR_REPOSITORY}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.api-golang -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $REGISTRY/$ECR_REPOSITORY:latest .
          docker push --all-tags $REGISTRY/$ECR_REPOSITORY
  deploy:
    name: "Continuous Delivery"
    runs-on: ubuntu-latest
    needs: create-docker-image
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{vars.AWS_REGION}}
      - name: Update ECS service
        env:
          ECS_CLUSTER: ${{vars.AWS_ECS_CLUSTER}}
          ECS_SERVICE: ${{vars.AWS_ECS_SERVICE}}
          ECS_TASK: ${{vars.AWS_ECS_TASK}}
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $ECS_TASK --force-new-deployment